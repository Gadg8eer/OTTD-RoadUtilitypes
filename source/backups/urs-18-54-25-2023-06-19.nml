# 1 "urs.pnml"
# 1 "src/header.pnml" 1
/*
 * This file is aimed to provide an example on how to code roadtypes and tramtypes in NML.
 * To keep the code readable, not every property or variable is documented in
 * detail, refer to the object-specific reference in the documentation.
 */

/**********************************************
 * Header, containing some general stuff:
 **********************************************/

 /*
 * First, define a grf block. This defines some basic properties of the grf,
 * which are required for the grf to be valid and loadable.
 */
grf {
    /* This grf is part of NML, therefore "NML" is chosen as the first three
     * characters of the GRFID. It is the fifth real grf defined as part of
     * NML, therefore the last character is set to 4. Successive grfs will
     * have 5, 6, etc. there, to make sure each example grf has a unique GRFID.
     */
    grfid : "G8R\02";
    name : string(STR_GRF_NAME);
    desc : string(STR_GRF_DESCRIPTION);
    version : 49; // must be numeric
    min_compatible_version : 49;
	param {
			param_houses {
				type:      bool;
				name:      string(STR_PARAM_6_NAME);
				desc:      string(STR_PARAM_6_DESC);
			}
		}
}

//========================
//begin defining templates
//========================

template template_roads_main_new (x, y) {
	[ x,           y,       64,    31,     -31,        0]  //nw-se normal
	[ x+69,        y,       64,    31,     -31,        0]  //ne-sw normal
	[ x+138,       y,       64,    31,     -31,        0]  //4-way normal
	[ x+207,       y,       64,    31,     -31,        0]  //ne spur normal
	[ x+276,       y,       64,    31,     -31,        0]  //nw spur normal
	[ x+345,       y,       64,    31,     -31,        0]  //sw spur normal
	[ x+414,       y,       64,    31,     -31,        0]  //se spur normal
	[ x+483,       y,       64,    31,     -31,        0]  //e corner normal
	[ x+552,       y,       64,    31,     -31,        0]  //s corner normal
	[ x+621,       y,       64,    31,     -31,        0]  //w corner normal
	[ x+690,       y,       64,    31,     -31,        0]  //n corner normal
	[ x+759,       y,       64,    39,     -31,       -8]  //ne slope normal
	[ x+828,       y,       64,    23,     -31,        0]  //se slope normal
	[ x+897,       y,       64,    23,     -31,        0]  //sw slope normal
	[ x+966,       y,       64,    39,     -31,       -8]  //nw slope normal
	[ x+1035,      y,       64,    31,     -31,        0, ANIM]  //sw end normal
	[ x+1104,      y,       64,    31,     -31,        0, ANIM]  //nw end normal
	[ x+1173,      y,       64,    31,     -31,        0, ANIM]  //ne end normal
	[ x+1242,      y,       64,    31,     -31,        0, ANIM]  //se end normal
}/*
template template_roads_main_modern_city1 (x, y) {
	[ x,        y+36,       64,    31,     -31,        0]  //nw-se normal
	[ x+69,     y+36,       64,    31,     -31,        0]  //ne-sw normal
	[ x+138,       y,       64,    31,     -31,        0]  //4-way normal
	[ x+207,       y,       64,    31,     -31,        0]  //ne spur normal
	[ x+276,       y,       64,    31,     -31,        0]  //nw spur normal
	[ x+345,       y,       64,    31,     -31,        0]  //sw spur normal
	[ x+414,       y,       64,    31,     -31,        0]  //se spur normal
	[ x+483,       y,       64,    31,     -31,        0]  //e corner normal
	[ x+552,       y,       64,    31,     -31,        0]  //s corner normal
	[ x+621,       y,       64,    31,     -31,        0]  //w corner normal
	[ x+690,       y,       64,    31,     -31,        0]  //n corner normal
	[ x+759,       y,       64,    39,     -31,       -8]  //ne slope normal
	[ x+828,       y,       64,    23,     -31,        0]  //se slope normal
	[ x+897,       y,       64,    23,     -31,        0]  //sw slope normal
	[ x+966,       y,       64,    39,     -31,       -8]  //nw slope normal
	[ x+1035,      y,       64,    31,     -31,        0, ANIM]  //sw end normal
	[ x+1104,      y,       64,    31,     -31,        0, ANIM]  //nw end normal
	[ x+1173,      y,       64,    31,     -31,        0, ANIM]  //ne end normal
	[ x+1242,      y,       64,    31,     -31,        0, ANIM]  //se end normal
}
template template_roads_main_modern_city2 (x, y) {
	[ x,        y+72,       64,    31,     -31,        0]  //nw-se normal
	[ x+69,     y+72,       64,    31,     -31,        0]  //ne-sw normal
	[ x+138,       y,       64,    31,     -31,        0]  //4-way normal
	[ x+207,       y,       64,    31,     -31,        0]  //ne spur normal
	[ x+276,       y,       64,    31,     -31,        0]  //nw spur normal
	[ x+345,       y,       64,    31,     -31,        0]  //sw spur normal
	[ x+414,       y,       64,    31,     -31,        0]  //se spur normal
	[ x+483,       y,       64,    31,     -31,        0]  //e corner normal
	[ x+552,       y,       64,    31,     -31,        0]  //s corner normal
	[ x+621,       y,       64,    31,     -31,        0]  //w corner normal
	[ x+690,       y,       64,    31,     -31,        0]  //n corner normal
	[ x+759,       y,       64,    39,     -31,       -8]  //ne slope normal
	[ x+828,       y,       64,    23,     -31,        0]  //se slope normal
	[ x+897,       y,       64,    23,     -31,        0]  //sw slope normal
	[ x+966,       y,       64,    39,     -31,       -8]  //nw slope normal
	[ x+1035,      y,       64,    31,     -31,        0, ANIM]  //sw end normal
	[ x+1104,      y,       64,    31,     -31,        0, ANIM]  //nw end normal
	[ x+1173,      y,       64,    31,     -31,        0, ANIM]  //ne end normal
	[ x+1242,      y,       64,    31,     -31,        0, ANIM]  //se end normal
}*/
template template_roads_gui (x, y) {
	[ x,           y,       20,    13,       0,        0]  //nw-se toolbar
	[ x+32,        y,       20,    13,       0,        0]  //ne-sw toolbar
	[ x+64,        y,       20,    20,       0,        1]  //4-way toolbar
	[ x+96,        y,       20,    20,       0,        0]  //depot toolbar
	[ x+128,       y,       20,    20,       0,        0]  //tunnel toolbar
	[ x+160,       y,       20,    20,       0,        0]  //convert toolbar
	[ x,           y+32,    48,    36,       0,        0]  //nw-se cursor
	[ x+64,        y+32,    52,    36,       0,        0]  //ne-sw cursor
	[ x+128,       y+32,    32,    32,       0,        0]  //4-way cursor
	[ x+172,       y+32,    32,    32,       0,        0]  //depot cursor
	[ x+216,       y+32,    32,    32,       0,        0]  //tunnel cursor
	[ x+260,       y+32,    32,    32,       0,        0]  //convert cursor
}
template template_road_stops (x, y) {
	[ x,           y,       64,    31,     -31,        0]  //ne
	[ x+69,        y,       64,    31,     -31,        0]  //se
	[ x+138,       y,       64,    31,     -31,        0]  //sw
	[ x+207,       y,       64,    31,     -31,        0]  //nw
}
template template_road_bridge_overlay (x, y) {
	[ x,           y,       64,    31,     -31,        0]  //nw-se flat
	[ x+69,        y,       64,    31,     -31,        0]  //ne-sw flat
	[ x+138,       y,       64,    39,     -31,       -8]  //ne slope
	[ x+207,       y,       64,    23,     -31,        0]  //se slope
	[ x+276,       y,       64,    23,     -31,        0]  //sw slope
	[ x+345,       y,       64,    39,     -31,       -8]  //nw slope
}
template template_road_tunnels (x, y) {
	[ x,           y,       64,    31,     -31,        0]  //ne
	[ x+69,        y,       64,    31,     -31,        0]  //se
	[ x+138,       y,       64,    31,     -31,        0]  //sw
	[ x+207,       y,       64,    31,     -31,        0]  //nw
}
# 1 "urs.pnml" 1
# 1 "src/nrt.pnml" 1
# 1 "urs.pnml" 1

# 1 "src/template/template_ground.pnml" 1

/* Default ground tile template (re-use as needed) */
template ground_tile(x, y) { [x, y, 64, 31, -31, 0] }
# 1 "urs.pnml" 1
# 1 "src/template/template_roadunderlay.pnml" 1

/**********************************************
 * Road underlays (tracks + ballast):
 **********************************************/
/* Template for underlays; 2x straight road, 5x junctions, 4x corners, 4x slope, 4x half-tile road */

/* Used for bridge surfaces also, therefore the template is split */
template tmpl_underlay_straight() {
    ground_tile( 0, 0)
    ground_tile(75, 0)
}
template tmpl_underlay_junctions() {
    ground_tile(150, 0)
    ground_tile(225, 0)
    ground_tile(300, 0)
    ground_tile(375, 0)
    ground_tile(450, 0)
}
template tmpl_underlay_corners() {
    ground_tile(  0, 40)
    ground_tile( 75, 40)
    ground_tile(150, 40)
    ground_tile(225, 40)
}
template tmpl_underlay_slope() {
    [300, 40, 64, 39, -31, -8]
    [375, 40, 64, 23, -31, 0]
    [450, 40, 64, 23, -31, 0]
    [525, 40, 64, 39, -31, -8]
}
template tmpl_underlay_half_tiles() {
    ground_tile(  0, 80)
    ground_tile( 75, 80)
    ground_tile(150, 80)
    ground_tile(225, 80)
}
template tmpl_underlay_roadtypes() {
    tmpl_underlay_straight()
    tmpl_underlay_junctions()
    tmpl_underlay_corners()
    tmpl_underlay_slope()
    tmpl_underlay_half_tiles()
}

/**********************************************
 * Tram underlays (tracks + ballast):
 **********************************************/
/* Template for underlays; 2x straight tram, 5x junctions, 4x corners, 4x slope, 4x half-tile tram */

/* All other underlays are used for tram surfaces also, therefore the template is split */
template tmpl_underlay_tramtypes() {
    tmpl_underlay_straight()
    tmpl_underlay_junctions()
    tmpl_underlay_corners()
    tmpl_underlay_slope()
    tmpl_underlay_half_tiles()
}

/* Spriteset containing all underlays */
spriteset(track_underlays, "gfx/template/roads_underlay.png") {
    tmpl_underlay_roadtypes()
}
/* Spriteset containing all underlays */
spriteset(road_underlays, "gfx/roads/XXXX_BASE/roads_underlay.png") {
    tmpl_underlay_roadtypes()
}
# 1 "urs.pnml" 1
# 1 "src/template/template_trackoverlay.pnml" 1

/**********************************************
 * Track overlays (tracks without ballast):
 **********************************************/
template tmpl_overlay_roadtypes() {
    [ 0, 0, 64, 31, -31, 0]
    [75, 0, 64, 31, -31, 0]

    [150, 0, 64, 31, -31, 0]
    [225, 0, 64, 31, -31, 0]
    [300, 0, 64, 31, -31, 0]
    [375, 0, 64, 31, -31, 0]
    [450, 0, 64, 31, -31, 0]

    [  0, 40, 64, 31, -31, 0]
    [ 75, 40, 64, 31, -31, 0]
    [150, 40, 64, 31, -31, 0]
    [225, 40, 64, 31, -31, 0]

    [300, 40, 64, 39, -31, -8]
    [375, 40, 64, 21, -31, 0]
    [450, 40, 64, 21, -31, 0]
    [525, 40, 64, 39, -31, -8]

    [  0, 80, 64, 31, -31, 0]
    [ 75, 80, 64, 31, -31, 0]
    [150, 80, 64, 31, -31, 0]
    [225, 80, 64, 31, -31, 0]
}

/* Spritesets for test overlays */
spriteset(road_overlays_red, "gfx/roads_red.png") {
    tmpl_overlay_roadtypes()
}
spriteset(road_overlays_blue, "gfx/roads_blue.png") {
    tmpl_overlay_roadtypes()
}
spriteset(road_overlays_yellow, "gfx/roads_yellow.png") {
    tmpl_overlay_roadtypes()
}
spriteset(tram_overlays_green, "gfx/tram_green.png") {
    tmpl_overlay_roadtypes()
}

spriteset(road_overlays_base, "gfx/roads/XXXX_BASE/roads_road.png") {
    tmpl_overlay_roadtypes()
}
/* Spriteset for road overlays */
spriteset(road_overlays_road, "gfx/roads/0000_RAAN/roads_road.png") {
    tmpl_overlay_roadtypes()
}

/**********************************************
 * Road overlays (Electrified Road):
 **********************************************/
/* Template for underlays; 2x straight road, 5x junctions, 4x corners, 4x slope, 4x half-tile road */
template tmpl_catenary_back_workaround_roadtypes() {
    [ 0, 0, 64, 57, -31, -26]
    [80, 0, 64, 57, -31, -26]
    [160, 0, 64, 57, -31, -26]
    [240, 0, 64, 57, -31, -26]
    [320, 0, 64, 57, -31, -26]
    [400, 0, 64, 57, -31, -26]
    [480, 0, 64, 57, -31, -26]
	
    [  0, 80, 64, 57, -31, -26]
    [ 80, 80, 64, 57, -31, -26]
    [160, 80, 64, 57, -31, -26]
    [240, 80, 64, 57, -31, -26]
    [320, 80, 64, 65, -31, -34]
    [400, 80, 64, 65, -31, -34]
    [480, 80, 64, 65, -31, -34]
    [560, 80, 64, 65, -31, -34]
    
	[  0, 160, 64, 57, -31, -26]
    [ 80, 160, 64, 57, -31, -26]
    [160, 160, 64, 57, -31, -26]
    [240, 160, 64, 57, -31, -26]
	[320, 160, 64, 48, 0, 0]
	[400, 160, 64, 48, 0, 0]
	[480, 160, 64, 48, 0, 0]
	[560, 160, 64, 48, 0, 0]
	
	[  0, 240, 64, 48, 0, 0]
	[ 80, 240, 64, 48, 0, 0]
	[160, 240, 64, 57, 0, 0]
	[240, 240, 64, 57, 0, 0]
	[320, 240, 64, 57, 0, 0]
	[400, 240, 64, 57, 0, 0]
}

/**********************************************
 * Tram overlays (Electrified Tram):
 **********************************************/
/* Template for underlays; 2x straight tram, 5x junctions, 4x corners, 4x slope, 4x half-tile tram */
template tmpl_catenary_back_workaround_tramtypes() {
    [ 0, 0, 64, 57, -31, -26]
    [80, 0, 64, 57, -31, -26]
    [160, 0, 64, 57, -31, -26]
    [240, 0, 64, 57, -31, -26]
    [320, 0, 64, 57, -31, -26]
    [400, 0, 64, 57, -31, -26]
    [480, 0, 64, 57, -31, -26]
	
    [  0, 80, 64, 57, -31, -26]
    [ 80, 80, 64, 57, -31, -26]
    [160, 80, 64, 57, -31, -26]
    [240, 80, 64, 57, -31, -26]
    [320, 80, 64, 65, -31, -34]
    [400, 80, 64, 65, -31, -34]
    [480, 80, 64, 65, -31, -34]
    [560, 80, 64, 65, -31, -34]
    
	[  0, 160, 64, 57, -31, -26]
    [ 80, 160, 64, 57, -31, -26]
    [160, 160, 64, 57, -31, -26]
    [240, 160, 64, 57, -31, -26]
	[320, 160, 64, 48, 0, 0]
	[400, 160, 64, 48, 0, 0]
	[480, 160, 64, 48, 0, 0]
	[560, 160, 64, 48, 0, 0]
	
	[  0, 240, 64, 48, 0, 0]
	[ 80, 240, 64, 48, 0, 0]
	[160, 240, 64, 57, 0, 0]
	[240, 240, 64, 57, 0, 0]
	[320, 240, 64, 57, 0, 0]
	[400, 240, 64, 57, 0, 0]
}

/**********************************************
 * Catenary (Suspended Monorail):
 **********************************************/
/* Template for underlays; 2x straight tram, 5x junctions, 4x corners, 4x slope, 4x half-tile tram */
/*template tmpl_catenary_back_monorail() {
    [  0, 0, 70, 55, -34, -24]
    [ 80, 0, 70, 55, -34, -24]
    [160, 0, 70, 55, -34, -24]
    [240, 0, 70, 55, -34, -24]
    [320, 0, 70, 55, -34, -24]
    [400, 0, 70, 55, -34, -24]
    [480, 0, 70, 55, -34, -24]
	
    [  0, 80, 70, 55, -34, -24]
    [ 80, 80, 70, 55, -34, -24]
    [160, 80, 70, 55, -34, -24]
    [240, 80, 70, 55, -34, -24]
    [320, 80, 70, 65, -34, -33]
    [400, 80, 70, 55, -34, -24]
    [480, 80, 70, 55, -34, -24]
    [560, 80, 70, 65, -34, -33]
    
	[  0, 160, 70, 55, -34, -24]
    [ 80, 160, 70, 55, -34, -24]
    [160, 160, 70, 55, -34, -24]
    [240, 160, 70, 55, -34, -24]
	[320, 160, 70, 55, 0, 0]
	[400, 160, 70, 55, 0, 0]
	[480, 160, 70, 55, 0, 0]
	[560, 160, 70, 55, 0, 0]
	
	[  0, 240, 70, 55, 0, 0]
	[ 80, 240, 70, 55, 0, 0]
	[160, 240, 70, 60, 0, 0]
	[240, 240, 70, 55, 0, 0]
	[320, 240, 70, 60, 0, 0]
	[400, 240, 70, 55, 0, 0]
}
*/
# 1 "urs.pnml" 1
# 1 "src/template/template_depot.pnml" 1

/**********************************************
 * Depots:
 **********************************************/
/* Template for depot sprites */

template tmpl_road_depot_isr() {
	[ 10,  80, 25, 25,   8,   3]
	[ 50,  80, 67, 51,  -2, -35]
	[130,  80, 25, 25, -31,   3]
	[170,  80, 67, 51, -63, -35]
	[250,  10, 67, 51, -63, -35]
	[330,  10, 67, 51,  -2, -35]
}

template tmpl_tram_depot_isr() {
	[ 10, 150, 25, 25,   8,   3]
	[ 50,  80, 67, 51,  -2, -35]
	[130, 150, 25, 25, -31,   3]
	[170,  80, 67, 51, -63, -35]
	[250,  10, 67, 51, -63, -35]
	[330,  10, 67, 51,  -2, -35]
}

template tmpl_depot_road() {
    [200, 10, 16,  8,  17,   7+4]
    [118,  8, 64, 47,  -9+8, -31]
    [  0, 10, 16,  8, -31,   7+4]
    [ 37,  8, 64, 47, -53-8, -31]
    [ 37, 63, 64, 47, -53-8, -31]
    [118, 63, 64, 47,  -9+8, -31]
}

template tmpl_depot_uratt() {
    [  10, 10, 64, 61, -31,  -30]
    [  80, 10, 64, 61,  -1,  -45]
    [ 150, 10, 64, 61, -31,  -30]
    [ 220, 10, 64, 61, -61,  -45]
    [ 290, 10, 64, 61, -61,  -45]
    [ 360, 10, 64, 61,  -1,  -45]
}

template tmpl_tram_depot_mono() {
	[ 10, 150, 25, 25,   5,   0]
	[ 50,  80, 64, 64,  -2, -49]
	[130, 150, 25, 25, -29,   0]
	[170,  80, 64, 64, -61, -49]
	[250,  10, 62, 64, -61, -49]
	[330,  10, 62, 64,  -1, -49]
}



/* Depots */
spriteset(depot_isr_road, "gfx/roads/XXXX_BASE/isr_depot.png") {
    tmpl_road_depot_isr()
}

/* Depots */
spriteset(depot_isr_tram, "gfx/roads/XXXX_BASE/isr_depot.png") {
    tmpl_tram_depot_isr()
}



/* Depots */
//spriteset(depot_normal_road, "gfx/roads/0000_RAAN/depot_normal.png") {
//    tmpl_depot_road()
//}
# 1 "urs.pnml" 1
# 1 "src/template/template_bridge.pnml" 1

/**********************************************
 * Bridge surfaces:
 **********************************************/
/* Bridge surface, uses the same sprites as track underlays, but in a different order */
template tmpl_bridges_underlay() {
    tmpl_underlay_straight()
    tmpl_underlay_slope()
    tmpl_underlay_junctions()
}
/* Spriteset for bridge surfaces */
spriteset(bridge_underlay_base, "gfx/roads/XXXX_BASE/roads_underlay.png") {
    tmpl_bridges_underlay()
}
/* Spriteset for bridge surfaces */
spriteset(bridge_underlay_road, "gfx/roads/0000_RAAN/roads_underlay.png") {
    tmpl_bridges_underlay()
}
# 1 "urs.pnml" 1
# 1 "src/template/template_gui.pnml" 1

/**********************************************
 * GUI sprites:
 **********************************************/

/* Template for a single icon sprite */
template tmpl_gui_icon(x, y) {
    [x, y, 20, 20, 0, 0]
}

/* Template for a single cursor sprite */
template tmpl_gui_cursor(x, y) {
    [x, y, 32, 32, 0, 0]
}
/* Template for all the GUI sprites (8 icons + 8 cursors) */
template tmpl_gui() {
    tmpl_gui_icon(  0, 0)
    tmpl_gui_icon( 25, 0)
    tmpl_gui_icon( 50, 0)
    tmpl_gui_icon( 75, 0)
    tmpl_gui_icon(100, 0)
    tmpl_gui_icon(125, 0)
    tmpl_gui_icon(150, 0)
    tmpl_gui_icon(175, 0)

    tmpl_gui_cursor(200, 0)
    tmpl_gui_cursor(250, 0)
    tmpl_gui_cursor(300, 0)
    tmpl_gui_cursor(350, 0)
    tmpl_gui_cursor(400, 0)
    tmpl_gui_cursor(450, 0)
    tmpl_gui_cursor(500, 0)
    tmpl_gui_cursor(550, 0)
}

/* Spritesets for the normal and electric GUI */
spriteset(gui_normal, "gfx/roads/XXXX_BASE/gui_rail.png") {
    tmpl_gui()
}
# 1 "urs.pnml" 1
# 1 "src/template/template_roadstop.pnml" 1

/**********************************************
 * Roadstop sprites:
 **********************************************/

template tmpl_underlay_roadstop() {
    ground_tile(  0, 120)
    ground_tile( 75, 120)
    ground_tile(150, 120)
    ground_tile(225, 120)
}

spriteset(roadstop_underlay_red, "gfx/roads_red.png") {
    tmpl_underlay_roadstop()
}
spriteset(roadstop_underlay_blue, "gfx/roads_blue.png") {
    tmpl_underlay_roadstop()
}
spriteset(roadstop_underlay_yellow, "gfx/roads_yellow.png") {
    tmpl_underlay_roadstop()
}
spriteset(roadstop_underlay_base, "gfx/roads/XXXX_BASE/roads_road.png") {
    tmpl_underlay_roadstop()
}
/* spriteset(roadstop_underlay_road, "gfx/roads/0000_RAAN/roads_raan.png") {
    tmpl_underlay_roadstop()
} */
# 1 "urs.pnml" 1
# 1 "src/template/template_catenaryfront.pnml" 1

/**********************************************
 * Catenary (Road):
 **********************************************/
/* Template for underlays; 2x straight road, 5x junctions, 4x corners, 4x slope, 4x half-tile road */
template tmpl_catenary_front_roadtypes() {
    [ 0, 0, 64, 57, -31, -26]
    [80, 0, 64, 57, -31, -26]
    [160, 0, 64, 57, -31, -26]
    [240, 0, 64, 57, -31, -26]
    [320, 0, 64, 57, -31, -26]
    [400, 0, 64, 57, -31, -26]
    [480, 0, 64, 57, -31, -26]
	
    [  0, 80, 64, 31, -31, -26]
    [ 80, 80, 64, 31, -31, -26]
    [160, 80, 64, 31, -31, -26]
    [240, 80, 64, 31, -31, -26]
    [320, 80, 64, 64, -31, -34]
    [400, 80, 64, 64, -31, -34]
    [480, 80, 64, 64, -31, -34]
    [560, 80, 64, 64, -31, -34]
    
	[  0, 160, 64, 57, -31, -26]
    [ 80, 160, 64, 57, -31, -26]
    [160, 160, 64, 57, -31, -26]
    [240, 160, 64, 57, -31, -26]
	[320, 160, 64, 48, 0, 0]
	[400, 160, 64, 48, 0, 0]
	[480, 160, 64, 48, 0, 0]
	[560, 160, 64, 48, 0, 0]
	
	[  0, 240, 64, 48, 0, 0]
	[ 80, 240, 64, 48, 0, 0]
	[160, 240, 64, 57, 0, 0]
	[240, 240, 64, 57, 0, 0]
	[320, 240, 64, 57, 0, 0]
	[400, 240, 64, 57, 0, 0]
}

/**********************************************
 * Catenary (Tram):
 **********************************************/
/* Template for underlays; 2x straight tram, 5x junctions, 4x corners, 4x slope, 4x half-tile tram */
template tmpl_catenary_front_tramtypes() {
    [ 0, 0, 64, 57, -31, -26]
    [80, 0, 64, 57, -31, -26]
    [160, 0, 64, 57, -31, -26]
    [240, 0, 64, 57, -31, -26]
    [320, 0, 64, 57, -31, -26]
    [400, 0, 64, 57, -31, -26]
    [480, 0, 64, 57, -31, -26]
	
    [  0, 80, 64, 31, -31, -26]
    [ 80, 80, 64, 31, -31, -26]
    [160, 80, 64, 31, -31, -26]
    [240, 80, 64, 31, -31, -26]
    [320, 80, 64, 64, -31, -34]
    [400, 80, 64, 64, -31, -34]
    [480, 80, 64, 64, -31, -34]
    [560, 80, 64, 64, -31, -34]
    
	[  0, 160, 64, 57, -31, -26]
    [ 80, 160, 64, 57, -31, -26]
    [160, 160, 64, 57, -31, -26]
    [240, 160, 64, 57, -31, -26]
	[320, 160, 64, 48, 0, 0]
	[400, 160, 64, 48, 0, 0]
	[480, 160, 64, 48, 0, 0]
	[560, 160, 64, 48, 0, 0]
	
	[  0, 240, 64, 48, 0, 0]
	[ 80, 240, 64, 48, 0, 0]
	[160, 240, 64, 57, 0, 0]
	[240, 240, 64, 57, 0, 0]
	[320, 240, 64, 57, 0, 0]
	[400, 240, 64, 57, 0, 0]
}

/**********************************************
 * Catenary (Suspended Monorail):
 **********************************************/
/* Template for underlays; 2x straight road, 5x junctions, 4x corners, 4x slope, 4x half-tile road */
template tmpl_catenary_front_monorail() {
    [  0, 0, 70, 55, -34, -24]
    [ 80, 0, 70, 55, -34, -24]
    [160, 0, 70, 55, -34, -24]
    [240, 0, 70, 55, -34, -24]
    [320, 0, 70, 55, -34, -24]
    [400, 0, 70, 55, -34, -24]
    [480, 0, 70, 55, -34, -24]
	
    [  0, 80, 70, 55, -34, -24]
    [ 80, 80, 70, 55, -34, -24]
    [160, 80, 70, 55, -34, -24]
    [240, 80, 70, 55, -34, -24]
    [320, 80, 70, 65, -34, -33]
    [400, 80, 70, 55, -34, -24]
    [480, 80, 70, 55, -34, -24]
    [560, 80, 70, 65, -34, -33]
    
	[  0, 160, 70, 55, -33, -24]
    [ 80, 160, 70, 55, -33, -24]
    [160, 160, 70, 55, -33, -24]
    [240, 160, 70, 55, -33, -24]
	[320, 160, 70, 55, 0, 0]
	[400, 160, 70, 55, 0, 0]
	[480, 160, 70, 55, 0, 0]
	[560, 160, 70, 55, 0, 0]
	
	[  0, 240, 70, 55, 0, 0]
	[ 80, 240, 70, 55, 0, 0]
	[160, 240, 70, 60, 0, 0]
	[240, 240, 70, 55, 0, 0]
	[320, 240, 70, 60, 0, 0]
	[400, 240, 70, 55, 0, 0]
}
# 1 "urs.pnml" 1
# 1 "src/template/template_catenaryback.pnml" 1

/**********************************************
 * Catenary (Road):
 **********************************************/
/* Template for underlays; 2x straight road, 5x junctions, 4x corners, 4x slope, 4x half-tile road */
template tmpl_catenary_back_roadtypes() {
    [ 0, 0, 64, 57, -31, -26]
    [80, 0, 64, 57, -31, -26]
    [160, 0, 64, 57, -31, -26]
    [240, 0, 64, 57, -31, -26]
    [320, 0, 64, 57, -31, -26]
    [400, 0, 64, 57, -31, -26]
    [480, 0, 64, 57, -31, -26]
	
    [  0, 80, 64, 31, -31, -26]
    [ 80, 80, 64, 31, -31, -26]
    [160, 80, 64, 31, -31, -26]
    [240, 80, 64, 31, -31, -26]
    [320, 80, 64, 64, -31, -34]
    [400, 80, 64, 64, -31, -34]
    [480, 80, 64, 64, -31, -34]
    [560, 80, 64, 64, -31, -34]
    
	[  0, 160, 64, 57, -31, -26]
    [ 80, 160, 64, 57, -31, -26]
    [160, 160, 64, 57, -31, -26]
    [240, 160, 64, 57, -31, -26]
	[320, 160, 64, 48, 0, 0]
	[400, 160, 64, 48, 0, 0]
	[480, 160, 64, 48, 0, 0]
	[560, 160, 64, 48, 0, 0]
	
	[  0, 240, 64, 48, -33, -18]
	[ 80, 240, 64, 48, -29, -18]
	[160, 240, 64, 57, 0, 0]
	[240, 240, 64, 57, 0, 0]
	[320, 240, 64, 57, 0, 0]
	[400, 240, 64, 57, 0, 0]
}


/**********************************************
 * Catenary (Road):
 **********************************************/
/* Template for underlays; 2x straight road, 5x junctions, 4x corners, 4x slope, 4x half-tile road */
template tmpl_catenary_back_tramtypes() {
    [ 0, 0, 64, 57, -31, -26]
    [80, 0, 64, 57, -31, -26]
    [160, 0, 64, 57, -31, -26]
    [240, 0, 64, 57, -31, -26]
    [320, 0, 64, 57, -31, -26]
    [400, 0, 64, 57, -31, -26]
    [480, 0, 64, 57, -31, -26]
	
    [  0, 80, 64, 31, -31, -26]
    [ 80, 80, 64, 31, -31, -26]
    [160, 80, 64, 31, -31, -26]
    [240, 80, 64, 31, -31, -26]
    [320, 80, 64, 64, -31, -34]
    [400, 80, 64, 64, -31, -34]
    [480, 80, 64, 64, -31, -34]
    [560, 80, 64, 64, -31, -34]
    
	[  0, 160, 64, 57, -31, -26]
    [ 80, 160, 64, 57, -31, -26]
    [160, 160, 64, 57, -31, -26]
    [240, 160, 64, 57, -31, -26]
	[320, 160, 64, 48, 0, 0]
	[400, 160, 64, 48, 0, 0]
	[480, 160, 64, 48, 0, 0]
	[560, 160, 64, 48, 0, 0]
	
	[  0, 240, 64, 48, -33, -18]
	[ 80, 240, 64, 48, -29, -18]
	[160, 240, 64, 57, 0, 0]
	[240, 240, 64, 57, 0, 0]
	[320, 240, 64, 57, 0, 0]
	[400, 240, 64, 57, 0, 0]
}


/**********************************************
 * Catenary (Suspended Monorail):
 **********************************************/
/* Template for underlays; 2x straight road, 5x junctions, 4x corners, 4x slope, 4x half-tile road */
template tmpl_catenary_back_monorail() {
    [  0, 0, 70, 55, -34, -24]
    [ 80, 0, 70, 55, -34, -24]
    [160, 0, 70, 55, -34, -24]
    [240, 0, 70, 55, -34, -24]
    [320, 0, 70, 55, -34, -24]
    [400, 0, 70, 55, -34, -24]
    [480, 0, 70, 55, -34, -24]
	
    [  0, 80, 70, 55, -34, -24]
    [ 80, 80, 70, 55, -34, -24]
    [160, 80, 70, 55, -34, -24]
    [240, 80, 70, 55, -34, -24]
    [320, 80, 70, 65, -34, -33]
    [400, 80, 70, 55, -34, -24]
    [480, 80, 70, 55, -34, -24]
    [560, 80, 70, 65, -34, -33]
    
	[  0, 160, 70, 55, -34, -24]
    [ 80, 160, 70, 55, -34, -24]
    [160, 160, 70, 55, -34, -24]
    [240, 160, 70, 55, -34, -24]
	[320, 160, 70, 55, 0, 0]
	[400, 160, 70, 55, 0, 0]
	[480, 160, 70, 55, 0, 0]
	[560, 160, 70, 55, 0, 0]
	
	[  0, 240, 70, 55, 0, 0]
	[ 80, 240, 70, 55, 0, 0]
	[160, 240, 70, 60, 0, 0]
	[240, 240, 70, 55, 0, 0]
	[320, 240, 70, 60, 0, 0]
	[400, 240, 70, 55, 0, 0]
}
# 1 "urs.pnml" 1
# 1 "src/template/template_newobject.pnml" 1
/* Template 1x1 */


template template_1x1(x,y,filename) {
    [x+18, y+8, 130, 140, -64, -93, ANIM, filename]
    [x+162, y+8, 130, 140, -64, -93, ANIM, filename]
    [x+306, y+8, 130, 140, -64, -93, ANIM, filename]
    [x+450, y+8, 130, 140, -64, -93, ANIM, filename]

}


/* Template 2x2 */

//template for the purchase menu
template template_2x2_purchase(x,y,filename) {
    [x, y, 128, 200, -95, -169, ANIM, filename]
    [x+133, y, 128, 200, -95, -169, ANIM, filename]
    [x+266, y, 128, 200, -95, -169, ANIM, filename]
    [x+399, y, 128, 200, -95, -169, ANIM, filename]
	
}

//template for sprite tile.1
template template_2x2_t1(x,y,filename) {
    [x+32, y, 64, 168, -31, -137, ANIM, filename]
    [x+165, y, 64, 168, -31, -137, ANIM, filename]
    [x+298, y, 64, 168, -31, -137, ANIM, filename]
    [x+431, y, 64, 168, -31, -137, ANIM, filename]
	
}

//template for sprite tile.2
template template_2x2_t2(x,y,filename) {
    [x+64, y, 64, 184, -31, -153, ANIM, filename]
    [x+197, y, 64, 184, -31, -153, ANIM, filename]
    [x+330, y, 64, 184, -31, -153, ANIM, filename]
    [x+463, y, 64, 184, -31, -153, ANIM, filename]
	
}

//template for sprite tile.3
template template_2x2_t3(x,y,filename) {
    [x, y, 64, 184, -31, -153, ANIM, filename]
    [x+133, y, 64, 184, -31, -153, ANIM, filename]
    [x+266, y, 64, 184, -31, -153, ANIM, filename]
    [x+399, y, 64, 184, -31, -153, ANIM, filename]
	
}

//template for sprite tile.4
template template_2x2_t4(x,y,filename) {
    [x+32, y, 64, 200, -31, -169, ANIM, filename]
    [x+165, y, 64, 200, -31, -169, ANIM, filename]
    [x+298, y, 64, 200, -31, -169, ANIM, filename]
    [x+431, y, 64, 200, -31, -169, ANIM, filename]
	
}
# 1 "urs.pnml" 1

# 1 "src/roads/0_0000_pipe.pnml" 1

template tmpl_overlay_roadtypes_pipe() {
    [ 0, 0, 64, 31, -31, 0]
    [75, 0, 64, 31, -31, 0]

    [150, 0, 64, 39, -31, -8]
    [225, 0, 64, 31, -31, 0]
    [300, 0, 64, 31, -31, 0]
    [375, 0, 64, 31, -31, 0]
    [450, 0, 64, 31, -31, 0]

    [  0, 40, 64, 31, -31, 0]
    [ 75, 40, 64, 31, -31, 0]
    [150, 40, 64, 31, -31, 0]
    [225, 40, 64, 31, -31, 0]

    [300, 40, 64, 39, -31, -8]
    [375, 40, 64, 21, -31, 0]
    [450, 40, 64, 21, -31, 0]
    [525, 40, 64, 39, -31, -8]

    [  0, 80, 64, 31, -31, 0]
    [ 75, 80, 64, 31, -31, 0]
    [150, 80, 64, 31, -31, 0]
    [225, 80, 64, 31, -31, 0]
}

/**********************************************
 * Spriteset definitions:
 **********************************************/

/* Spriteset for street overlays */
spriteset(road_overlays_pipe, "gfx/roads/0000_PIPE/roads_pipe.png") {
    tmpl_overlay_roadtypes_pipe()
}

/* Spriteset for bridge surfaces */
spriteset(bridge_underlay_pipe, "gfx/roads/0000_PIPE/roads_pipe.png") {
    tmpl_bridges_underlay()
}

/* Spriteset for gaslamp underlays */
spriteset(road_catenary_back_pipe, "gfx/roads/0000_PIPE/catenary_back.png") {
    tmpl_catenary_back_roadtypes()
}

/* Spriteset for gaslamp overlays */
spriteset(road_catenary_front_pipe, "gfx/roads/0000_PIPE/catenary_front.png") {
    tmpl_catenary_front_roadtypes()
}

/* Depots */
spriteset(depot_road_pipeline, "gfx/roads/0000_PIPE/depot_pipe.png") {
    tmpl_depot_uratt()
}

/* Roadstop */
spriteset(roadstop_underlay_pipe, "gfx/roads/0000_PIPE/roads_pipe.png") {
    tmpl_underlay_roadstop()
}

/* Underlay */
	spriteset(road_underlays_pipe, "gfx/roads/0000_PIPE/roads_underlay.png") {
    tmpl_underlay_roadtypes()
}

/**********************************************
 * Roadtype definitions:
 **********************************************/

/* Note that roadtypes only show in OpenTTD if compatible vehicles are available.
   examples/road_vehicle provides some vehicles for these roadtypes */

item(FEAT_ROADTYPES, pipe_util, 0) {
    property {
        name: string(STR_NAME_PIPE_ROAD);
        label: "UABG";
		introduction_date: date(0,1,1);
        powered_roadtype_list: ["UABG", "UAcG", "INDP", "PBBN",
		"UTIL", "UAAE", "UBBE",
		"ROAD", "ELRD", "OLD_", "RCDE", "RECE",
		"SETT", "ASP0", "ASP1", "ASP2", "ELSP", "ELA1", "ELA2",
		"PVRD", "PVRE", "ISRD", "ISRE",
		"IBEN", "IBEE",
		"ARD0", "ARD1", "ARD2", "ARD3", "ARD4", "ARD5", "AER0", "AER1", "AER2", "AER3", "AER4", "AER5",
		"SRD0", "SRD1", "SRD2",
		"URD0", "UER0", "URD1", "URD2", "URD3", "UER1", "URD2", "UER2", "UER3",
		"IRD0", "IRD1", "IRD2", "IRD3", "IER0", "IER1", "IER2", "IER3",
		"CBRD", "CBRE",
		"BLTG", "BLTC", "BLT0", "BLT1", "BLT2", "BLT3", "BLT4", "BLT5", "BLT6",
		"TNNL", "GTNL", "CTNL", "KTNL",
		"SMRT", "SMTS"];
		alternative_roadtype_list: ["UAcG", "PIPE", "PAAN", "INDP", "UAAE", "UBBE"];
        toolbar_caption: string(STR_TOOLBAR_CAPTION_PIPE_ROAD);
        menu_text: string(STR_MENU_TEXT_PIPE_ROAD);
        build_window_caption: string(STR_BUILD_WINDOW_CAPTION_PIPE_ROAD);
        autoreplace_text: string(STR_AUTOREPLACE_TEXT_PIPE_ROAD);
        new_engine_text: string(STR_NEW_ENGINE_TEXT_PIPE_ROAD);
        roadtype_flags: bitmask(ROADTYPE_FLAG_NO_LEVEL_CROSSING);
		construction_cost: 0;
		//speed_limit: 1 km/h;
		maintenance_cost: 0;
        sort_order: 97;
    }

    /* Associate graphics with this roadtype */
    graphics {
        track_overlay: road_overlays_pipe;
        underlay: track_underlays;
        depots: depot_road_pipeline;
        bridge_surfaces: bridge_underlay_pipe;
        roadstops: roadstop_underlay_pipe;
		//gui: gui_normal;
        /* Catenary is not not implemented here, use the default */
    }
}
# 1 "urs.pnml" 1
//#include "src/roads/1_1817_gslp.pnml"
# 1 "src/tramways/1817_gaslamp.pnml" 1

/**********************************************
 * Spriteset definitions:
 **********************************************/

/* Spriteset for street overlays */
spriteset(tram_overlays_gslp, "gfx/tramways/1817_GSLP/roads_gaslamp.png") {
     tmpl_catenary_back_workaround_tramtypes()
}

/* Spriteset for bridge surfaces */
spriteset(bridge_underlay_gslp, "gfx/tramways/1817_GSLP/roads_underlay.png") {
    tmpl_bridges_underlay()
}

/* Spriteset for gaslamp underlays */
spriteset(tram_catenary_back_gslp, "gfx/tramways/1817_GSLP/catenary_back.png") {
    tmpl_catenary_back_tramtypes()
}

/* Spriteset for gaslamp overlays */
spriteset(tram_catenary_front_gslp, "gfx/tramways/1817_GSLP/catenary_front.png") {
    tmpl_catenary_front_tramtypes()
}

/* Depots */
spriteset(depot_tram_gaslamp, "gfx/tramways/1817_GSLP/depot_gaslamp.png") {
    tmpl_depot_uratt()
}

/* Roadstop */
//spriteset(roadstop_underlay_gslp, "gfx/tramways/1817_GSLP/roads_roadstop_gaslamp.png") {
//    tmpl_underlay_roadstop()
//}

/* Underlay */
	spriteset(tram_underlays_gslp, "gfx/tramways/1817_GSLP/roads_underlay.png") {
    tmpl_underlay_tramtypes()
}

/**********************************************
 * Roadtype definitions:
 **********************************************/

/* Note that tramtypes only show in OpenTTD if compatible vehicles are available.
   examples/tram_vehicle provides some vehicles for these tramtypes */

item(FEAT_TRAMTYPES, urban_gaslamp, 1) {
    property {
        name: string(STR_NAME_GSLP_TRAM);
        label: "EABg";
		introduction_date: date(1817,2,7);
        powered_tramtype_list: ["GSLP", "GLMP"];
		alternative_tramtype_list: ["GSLP", "GLMP"];
        toolbar_caption: string(STR_TOOLBAR_CAPTION_GSLP_TRAM);
        menu_text: string(STR_MENU_TEXT_GSLP_TRAM);
        build_window_caption: string(STR_BUILD_WINDOW_CAPTION_GSLP_TRAM);
        autoreplace_text: string(STR_AUTOREPLACE_TEXT_GSLP_TRAM);
        new_engine_text: string(STR_NEW_ENGINE_TEXT_GSLP_TRAM);
        tramtype_flags: bitmask(TRAMTYPE_FLAG_CATENARY);
		tramtype_extra_flags: bitmask(TRAMTYPE_EXTRA_FLAG_NO_SCRIPT_BUILD, TRAMTYPE_EXTRA_FLAG_NO_TOWN_MODIFY, TRAMTYPE_EXTRA_FLAG_NO_TRAIN_COLLISION);
		tramtype_collision_mode: TRAMTYPE_COLLISION_MODE_NONE;
		construction_cost: 12;
		//speed_limit: 50 km/h;
		maintenance_cost: 1;
        sort_order: 67;
    }

    /* Associate graphics with this tramtype */
    graphics {
        //track_overlay: tram_overlays_gslp;
        //underlay: tram_underlays_gslp;
        depots: depot_tram_gaslamp;
        //bridge_surfaces: bridge_underlay_gslp;
        //roadstops: roadstop_underlay_gslp;
		//gui: gui_normal;
		catenary_back: tram_catenary_back_gslp;
        catenary_front: tram_catenary_front_gslp;
		
    }
}

/* GSLP DEPOTS (1x1) */

//spritesets with 4 directions, SNOW-version and the PURCHASE-menu
spriteset (spriteset_urs_gslp_1_1x1) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_1_1x1.png")
}

spriteset (spriteset_urs_gslp_1_1x1_SNOW) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_1_1x1_SNOW.png")
}

spriteset (spriteset_urs_gslp_1_1x1_PURCHASE) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_1_1x1.png")
}

/* spritelayouts */

//Direction_1
spritelayout spritelayout_urs_gslp_1_1x1_1 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_1_1x1(0);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_urs_gslp_1_1x1_SNOW(0);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_urs_gslp_1_1x1_1_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_1_1x1_PURCHASE(0);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}



//Direction_2
spritelayout spritelayout_urs_gslp_1_1x1_2 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_1_1x1(1);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

building {
        sprite: spriteset_urs_gslp_1_1x1_SNOW(1);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

}

spritelayout spritelayout_urs_gslp_1_1x1_2_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_1_1x1_PURCHASE(1);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 40;
   }
}

//Direction_3
spritelayout spritelayout_urs_gslp_1_1x1_3 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_1_1x1(2);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

building {
        sprite: spriteset_urs_gslp_1_1x1_SNOW(2);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

}

spritelayout spritelayout_urs_gslp_1_1x1_3_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_1_1x1_PURCHASE(2);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 40;
   }
}


//Direction_4
spritelayout spritelayout_urs_gslp_1_1x1_4 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_1_1x1(3);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_urs_gslp_1_1x1_SNOW(3);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_urs_gslp_1_1x1_4_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_1_1x1_PURCHASE(3);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}

//decide spritelayout for each of the 4 directions
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_1_1x1_view, view) {
    1:  spritelayout_urs_gslp_1_1x1_2;
    2:  spritelayout_urs_gslp_1_1x1_3;
    3:  spritelayout_urs_gslp_1_1x1_4;
    spritelayout_urs_gslp_1_1x1_1;
}

//calculate ground sprite for object
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_1_1x1_object, [
    STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
    STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
    STORE_TEMP(terrain_type == TILETYPE_DESERT ? GROUNDSPRITE_DESERT : LOAD_TEMP(1), 1),
    STORE_TEMP(terrain_type == TILETYPE_SNOW   ? GROUNDSPRITE_SNOW : LOAD_TEMP(1), 1),
    STORE_TEMP(snowline_height == 0xFF ? 0xFF : nearby_tile_height(0,0) - snowline_height, 127),
    STORE_TEMP((LOAD_TEMP(127) == -1) ? GROUNDSPRITE_SNOW_1_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  0) ? GROUNDSPRITE_SNOW_2_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  1) ? GROUNDSPRITE_SNOW_3_4 : LOAD_TEMP(1), 1)
        ]) {
    switch_urs_gslp_1_1x1_view;
}

//calculate ground sprite for purchase menu
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_1_1x1_purchase, view) {
    1:  spritelayout_urs_gslp_1_1x1_2_purchase;
    2:  spritelayout_urs_gslp_1_1x1_3_purchase;
    3:  spritelayout_urs_gslp_1_1x1_4_purchase;
    spritelayout_urs_gslp_1_1x1_1_purchase;
}

item (FEAT_OBJECTS, urs_gslp_1_1x1, 000) {
    property {
        class: "URSO";
        classname: string(STR_URSO);
        name: string(STR_urs_gslp_1_1x1);
        climates_available: ALL_CLIMATES;
        size: [1,1];
        build_cost_multiplier: 1;
        remove_cost_multiplier: 4;
        introduction_date: date(1700,1,1);
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_ANIMATED, OBJ_FLAG_REMOVE_IS_INCOME);
        height: 0;
        num_views: 4;
     }
    graphics {
        default: switch_urs_gslp_1_1x1_object;
        purchase: switch_urs_gslp_1_1x1_purchase;
        autoslope: return CB_RESULT_AUTOSLOPE;

      }
}


//spritesets with 4 directions, SNOW-version and the PURCHASE-menu
spriteset (spriteset_urs_gslp_2_1x1) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_2_1x1.png")
}

spriteset (spriteset_urs_gslp_2_1x1_SNOW) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_2_1x1_SNOW.png")
}

spriteset (spriteset_urs_gslp_2_1x1_PURCHASE) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_2_1x1.png")
}

/* spritelayouts */

//Direction_1
spritelayout spritelayout_urs_gslp_2_1x1_1 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_2_1x1(0);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_urs_gslp_2_1x1_SNOW(0);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_urs_gslp_2_1x1_1_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_2_1x1_PURCHASE(0);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}



//Direction_2
spritelayout spritelayout_urs_gslp_2_1x1_2 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_2_1x1(1);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

building {
        sprite: spriteset_urs_gslp_2_1x1_SNOW(1);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

}

spritelayout spritelayout_urs_gslp_2_1x1_2_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_2_1x1_PURCHASE(1);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 40;
   }
}

//Direction_3
spritelayout spritelayout_urs_gslp_2_1x1_3 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_2_1x1(2);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

building {
        sprite: spriteset_urs_gslp_2_1x1_SNOW(2);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

}

spritelayout spritelayout_urs_gslp_2_1x1_3_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_2_1x1_PURCHASE(2);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 40;
   }
}


//Direction_4
spritelayout spritelayout_urs_gslp_2_1x1_4 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_2_1x1(3);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_urs_gslp_2_1x1_SNOW(3);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_urs_gslp_2_1x1_4_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_2_1x1_PURCHASE(3);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}

//decide spritelayout for each of the 4 directions
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_2_1x1_view, view) {
    1:  spritelayout_urs_gslp_2_1x1_2;
    2:  spritelayout_urs_gslp_2_1x1_3;
    3:  spritelayout_urs_gslp_2_1x1_4;
    spritelayout_urs_gslp_2_1x1_1;
}

//calculate ground sprite for object
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_2_1x1_object, [
    STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
    STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
    STORE_TEMP(terrain_type == TILETYPE_DESERT ? GROUNDSPRITE_DESERT : LOAD_TEMP(1), 1),
    STORE_TEMP(terrain_type == TILETYPE_SNOW   ? GROUNDSPRITE_SNOW : LOAD_TEMP(1), 1),
    STORE_TEMP(snowline_height == 0xFF ? 0xFF : nearby_tile_height(0,0) - snowline_height, 127),
    STORE_TEMP((LOAD_TEMP(127) == -1) ? GROUNDSPRITE_SNOW_1_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  0) ? GROUNDSPRITE_SNOW_2_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  1) ? GROUNDSPRITE_SNOW_3_4 : LOAD_TEMP(1), 1)
        ]) {
    switch_urs_gslp_2_1x1_view;
}

//calculate ground sprite for purchase menu
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_2_1x1_purchase, view) {
    1:  spritelayout_urs_gslp_2_1x1_2_purchase;
    2:  spritelayout_urs_gslp_2_1x1_3_purchase;
    3:  spritelayout_urs_gslp_2_1x1_4_purchase;
    spritelayout_urs_gslp_2_1x1_1_purchase;
}

item (FEAT_OBJECTS, urs_gslp_2_1x1, 001) {
    property {
        class: "URSO";
        classname: string(STR_URSO);
        name: string(STR_urs_gslp_2_1x1);
        climates_available: ALL_CLIMATES;
        size: [1,1];
        build_cost_multiplier: 1;
        remove_cost_multiplier: 4;
        introduction_date: date(1700,1,1);
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_ANIMATED, OBJ_FLAG_REMOVE_IS_INCOME);
        height: 0;
        num_views: 4;
     }
    graphics {
        default: switch_urs_gslp_2_1x1_object;
        purchase: switch_urs_gslp_2_1x1_purchase;
        autoslope: return CB_RESULT_AUTOSLOPE;

      }
}
# 1 "urs.pnml" 1
# 1 "src/tramways/1843_telepole.pnml" 1

/**********************************************
 * Spriteset definitions:
 **********************************************/

/* Spriteset for street overlays */
spriteset(tramway_overlays_wire, "gfx/tramways/1843_WIRE/tramways_wire.png") {
     tmpl_catenary_back_workaround_tramtypes()
}

/* Spriteset for bridge surfaces */
spriteset(bridge_underlay_wire, "gfx/tramways/1843_WIRE/tramways_underlay.png") {
    tmpl_bridges_underlay()
}

/* Spriteset for utility pole underlays */
spriteset(tramway_catenary_back_wire, "gfx/tramways/1843_WIRE/catenary_back.png") {
    tmpl_catenary_back_tramtypes()
}

/* Spriteset for utility pole overlays */
spriteset(tramway_catenary_front_wire, "gfx/tramways/1843_WIRE/catenary_front.png") {
    tmpl_catenary_front_tramtypes()
}

/* Depots */
spriteset(depot_wire_tramway, "gfx/tramways/1843_WIRE/depot_wire.png") {
    tmpl_depot_uratt()
}

/* Roadstop */
//spriteset(tramwaystop_underlay_wire, "gfx/tramways/1843_WIRE/tramways_tramwaystop_wire.png") {
//    tmpl_underlay_roadstop()
//}

/* Underlay */
	spriteset(tramway_underlays_wire, "gfx/tramways/1843_WIRE/tramways_underlay.png") {
    tmpl_underlay_tramtypes()
}

/**********************************************
 * Roadtype definitions:
 **********************************************/

/* Note that tramtypes only show in OpenTTD if compatible vehicles are available.
   examples/tramway_vehicle provides some vehicles for these tramtypes */
   
//tramtypes

item(FEAT_TRAMTYPES, utility_poles, 2) {
    property {
        name: string(STR_NAME_WIRE_TRAM);
        label: "WIRE";
		introduction_date: date(1878,1,1);
        powered_tramtype_list: ["UTIL", "WIRE", "CEAE", "EABg", "GSLP", "GLMP", "UAAE", "UBBE",
		"TRAM", "ELRD", "OLD_", "RAAE", "RCDE", "RECE",
		//"ASP0", "ASP1", "ASP2",
		"ELSP", "ELA1", "ELA2",
		"CBRD", "CBRE", "PVRD", "PVRE", "ISRD", "ISRE",
		"ELHL",
		"IBEN", "IBEE",
		"ARD0", "ARD1", "ARD2", "ARD3", "ARD4", "ARD5", "AER0", "AER1", "AER2", "AER3", "AER4", "AER5",
		"SRD0", "SRD1", "SRD2",
		"URD0", "UER0", "URD1", "URD2", "URD3", "UER1", "URD2", "UER2", "UER3",
		"IRD0", "IRD1", "IRD2", "IRD3", "IER0", "IER1", "IER2", "IER3",
		"FORD", "FRZN",
		"CBRD", "CBRE",
		"BLTG", "BLTC", "BLT0", "BLT1", "BLT2", "BLT3", "BLT4", "BLT5", "BLT6",
		"TNNL", "GTNL", "CTNL", "KTNL",
		"SMRT", "SMTS"];
		alternative_tramtype_list: ["WIRE", "UTIL", "TELE", "EABg"];
        toolbar_caption: string(STR_TOOLBAR_CAPTION_WIRE_TRAM);
        menu_text: string(STR_MENU_TEXT_WIRE_TRAM);
        build_window_caption: string(STR_BUILD_WINDOW_CAPTION_WIRE_TRAM);
        autoreplace_text: string(STR_AUTOREPLACE_TEXT_WIRE_TRAM);
        new_engine_text: string(STR_NEW_ENGINE_TEXT_WIRE_TRAM);
        tramtype_flags: bitmask(TRAMTYPE_FLAG_CATENARY, TRAMTYPE_FLAG_NO_LEVEL_CROSSING);
		tramtype_extra_flags: bitmask(TRAMTYPE_EXTRA_FLAG_NO_SCRIPT_BUILD, TRAMTYPE_EXTRA_FLAG_NO_TOWN_MODIFY, TRAMTYPE_EXTRA_FLAG_NO_TUNNELS, NO_TRAIN_COLLISION);
		tramtype_collision_mode: TRAMTYPE_COLLISION_MODE_NONE;
		construction_cost: 1;
		//speed_limit: 8 km/h;
		maintenance_cost: 1;
        sort_order: 57;
    }

    /* Associate graphics with this tramtype */
    graphics {
        //track_overlay: tramway_overlays_wire;
        //underlay: tramway_underlays_wire;
        depots: depot_wire_tramway;
        //bridge_surfaces: bridge_underlay_wire;
        //roadstops: tramwaystop_underlay_wire;
		//gui: gui_normal;
        catenary_front: tramway_catenary_front_wire;
		catenary_back: tramway_catenary_back_wire;
    }
}
# 1 "urs.pnml" 1
# 1 "src/roads/3_1865_indp.pnml" 1

/**********************************************
 * Spriteset definitions:
 **********************************************/

/* Spriteset for street overlays */
spriteset(road_overlays_indp, "gfx/roads/1865_INDP/roads_indp.png") {
    tmpl_overlay_roadtypes_pipe()
}

/* Spriteset for bridge surfaces */
spriteset(bridge_underlay_indp, "gfx/roads/1865_INDP/roads_indp.png") {
    tmpl_bridges_underlay()
}

/* Spriteset for gaslamp underlays */
//spriteset(road_catenary_back_indp, "gfx/roads/1865_INDP/catenary_back.png") {
//    tmpl_catenary_back_roadtypes()
//}

/* Spriteset for gaslamp overlays */
spriteset(road_catenary_front_indp, "gfx/roads/1865_INDP/catenary_front.png") {
    tmpl_catenary_front_roadtypes()
}

/* Depots */
spriteset(depot_indp_road, "gfx/roads/1865_INDP/depot_indpipe.png") {
    tmpl_depot_uratt()
}

/* Roadstop */
spriteset(roadstop_underlay_indp, "gfx/roads/1865_INDP/roads_indp.png") {
    tmpl_underlay_roadstop()
}

/* Underlay */
	spriteset(road_underlays_indp, "gfx/roads/1865_INDP/roads_underlay.png") {
    tmpl_underlay_roadtypes()
}

/**********************************************
 * Roadtype definitions:
 **********************************************/

/* Note that roadtypes only show in OpenTTD if compatible vehicles are available.
   examples/road_vehicle provides some vehicles for these roadtypes */

item(FEAT_ROADTYPES, industrial_pipeline, 3) {
    property {
        name: string(STR_NAME_INDP_ROAD);
        label: "UAcG";
		introduction_date: date(1865,1,1);
        powered_roadtype_list: ["UAcG", "UABG", "PIPE", "UTIL", "UAAE", "UBBE",
		"ROAD", "ELRD", "RCDN", "RECN", "RECE",
		"SETT", "ASP0", "ASP1", "ASP2", "ELSP", "ELA1", "ELA2",
		"CBRD", "CBRE", "PVRD", "PVRE", "ISRD", "ISRE",
		"IBEN", "IBEE", "ICEN", "ICEE", "IDEN", "IDEE",
		"HBBN",
		"SRD0", "SRD1", "SRD2",
		"ARD0", "ARD1", "ARD2", "ARD3", "ARD4",
		"ERD2",
		"BLTG", "BLTC", "BLT0", "BLT1", "BLT2", "BLT3", "BLT4", "BLT5", "BLT6",
		"TNNL", "GTNL", "CTNL", "KTNL",
		"SMRT", "SMTS"];
		alternative_roadtype_list: ["UABG", "PIPE", "PAAN", "INDP", "UAAE", "UBBE"];
        toolbar_caption: string(STR_TOOLBAR_CAPTION_INDP_ROAD);
        menu_text: string(STR_MENU_TEXT_INDP_ROAD);
        build_window_caption: string(STR_BUILD_WINDOW_CAPTION_INDP_ROAD);
        autoreplace_text: string(STR_AUTOREPLACE_TEXT_INDP_ROAD);
        new_engine_text: string(STR_NEW_ENGINE_TEXT_INDP_ROAD);
        roadtype_flags: bitmask(ROADTYPE_FLAG_NO_LEVEL_CROSSING);
		roadtype_extra_flags: bitmask(ROADTYPE_EXTRA_FLAG_NO_SCRIPT_BUILD, ROADTYPE_EXTRA_FLAG_NO_TOWN_MODIFY, ROADTYPE_EXTRA_FLAG_NO_TRAIN_COLLISION);
		roadtype_collision_mode: ROADTYPE_COLLISION_MODE_NONE;
		construction_cost: 180;
		//speed_limit: 8 km/h;
		maintenance_cost: 2;
        sort_order: 47;
    }

    /* Associate graphics with this roadtype */
    graphics {
        track_overlay: road_overlays_indp;
        underlay: road_underlays_indp;
        depots: depot_indp_road;
        bridge_surfaces: bridge_underlay_indp;
        roadstops: roadstop_underlay_indp;
		//gui: gui_normal;
        /* Catenary is not not implemented here, use the default */
    }
}
# 1 "urs.pnml" 1
//#include "src/roads/4_1900_util.pnml"
//#include "src/roads/5_0000_tnnl.pnml"
# 1 "src/roads/6_0000_trd_.pnml" 1

item (FEAT_ROADTYPES, pedway) {
	property {
		label:						"TRD_";
		powered_roadtype_list:		["ROAD", "ELRD", "SMRT", "SMTS"];
		alternative_roadtype_list:	["UABG", "PIPE", "UAcG", "INDP"];
	}
}

item (FEAT_ROADTYPES, road) {
	property {
		label:						"ROAD";
		alternative_roadtype_list:	["TRD_", "UABG", "PIPE", "UAcG", "INDP"];
	}
}
# 1 "urs.pnml" 1
