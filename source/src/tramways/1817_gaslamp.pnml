
/**********************************************
 * Spriteset definitions:
 **********************************************/

/* Spriteset for street overlays */
spriteset(tram_overlays_gslp, "gfx/tramways/1817_GSLP/roads_gaslamp.png") {
     tmpl_catenary_back_workaround_tramtypes()
}

/* Spriteset for bridge surfaces */
spriteset(bridge_underlay_gslp, "gfx/tramways/1817_GSLP/roads_underlay.png") {
    tmpl_bridges_underlay()
}

/* Spriteset for gaslamp underlays */
spriteset(tram_catenary_back_gslp, "gfx/tramways/1817_GSLP/catenary_back.png") {
    tmpl_catenary_back_tramtypes()
}

/* Spriteset for gaslamp overlays */
spriteset(tram_catenary_front_gslp, "gfx/tramways/1817_GSLP/catenary_front.png") {
    tmpl_catenary_front_tramtypes()
}

/* Depots */
spriteset(depot_tram_gaslamp, "gfx/tramways/1817_GSLP/depot_gaslamp.png") {
    tmpl_depot_uratt()
}

/* Roadstop */
//spriteset(roadstop_underlay_gslp, "gfx/tramways/1817_GSLP/roads_roadstop_gaslamp.png") {
//    tmpl_underlay_roadstop()
//}

/* Underlay */
	spriteset(tram_underlays_gslp, "gfx/tramways/1817_GSLP/roads_underlay.png") {
    tmpl_underlay_tramtypes()
}

/**********************************************
 * Roadtype definitions:
 **********************************************/

/* Note that tramtypes only show in OpenTTD if compatible vehicles are available.
   examples/tram_vehicle provides some vehicles for these tramtypes */

item(FEAT_TRAMTYPES, SELF, urban_gaslamp, 1) {
    property {
        name: string(STR_NAME_GASLAMP_TRAM);
        label: "Gg8r";
		introduction_date: date(1817,2,7);
        powered_tramtype_list: ["RAIL", "RABN", "ELRL", "RABE", "EAaN", "EAAN", "EABN", "EACN", "EAcN", "EAaG", "EAAG", "EABG", "EACG", "EAcG", "EAaE", "EAAE", "EABE", "EACE", "EAcE", "MAA3", "MAB3", "MAC3", "INVI"];
		alternative_tramtype_list: ["WIRE", "Wire", "TELE", "Tele", "EAaG", "EAAG", "EABG", "EACG", "EAcG", "EAaE", "EAAE", "EABE", "EACE", "EAcE"];
        toolbar_caption: string(STR_TOOLBAR_CAPTION_GASLAMP_TRAM);
        menu_text: string(STR_MENU_TEXT_GASLAMP_TRAM);
        build_window_caption: string(STR_BUILD_WINDOW_CAPTION_GASLAMP_TRAM);
        autoreplace_text: string(STR_AUTOREPLACE_TEXT_GASLAMP_TRAM);
        new_engine_text: string(STR_NEW_ENGINE_TEXT_GASLAMP_TRAM);
        tramtype_flags: bitmask(TRAMTYPE_FLAG_CATENARY, TRAMTYPE_FLAG_NO_HOUSES);
		//tramtype_extra_flags: bitmask(TRAMTYPE_EXTRA_FLAG_NO_SCRIPT_BUILD, TRAMTYPE_EXTRA_FLAG_NO_TOWN_MODIFY, TRAMTYPE_EXTRA_FLAG_NO_TRAIN_COLLISION);
		//tramtype_collision_mode: TRAMTYPE_COLLISION_MODE_NONE;
		construction_cost: 12;
		speed_limit: 0;
		maintenance_cost: 1;
        sort_order: 67;
    }

    /* Associate graphics with this tramtype */
    graphics {
        //track_overlay: tram_overlays_gslp;
        //underlay: tram_underlays_gslp;
        depots: depot_tram_gaslamp;
        //bridge_surfaces: bridge_underlay_gslp;
        //roadstops: roadstop_underlay_gslp;
		//gui: gui_normal;
		catenary_back: tram_catenary_back_gslp;
        catenary_front: tram_catenary_front_gslp;
		
    }
}

/* GSLP DEPOTS (1x1) */

//spritesets with 4 directions, SNOW-version and the PURCHASE-menu
spriteset (spriteset_urs_gslp_1_1x1) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_1_1x1.png")
}

spriteset (spriteset_urs_gslp_1_1x1_SNOW) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_1_1x1_SNOW.png")
}

spriteset (spriteset_urs_gslp_1_1x1_PURCHASE) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_1_1x1.png")
}

/* spritelayouts */

//Direction_1
spritelayout spritelayout_urs_gslp_1_1x1_1 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_1_1x1(0);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_urs_gslp_1_1x1_SNOW(0);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_urs_gslp_1_1x1_1_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_1_1x1_PURCHASE(0);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}



//Direction_2
spritelayout spritelayout_urs_gslp_1_1x1_2 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_1_1x1(1);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

building {
        sprite: spriteset_urs_gslp_1_1x1_SNOW(1);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

}

spritelayout spritelayout_urs_gslp_1_1x1_2_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_1_1x1_PURCHASE(1);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 40;
   }
}

//Direction_3
spritelayout spritelayout_urs_gslp_1_1x1_3 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_1_1x1(2);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

building {
        sprite: spriteset_urs_gslp_1_1x1_SNOW(2);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

}

spritelayout spritelayout_urs_gslp_1_1x1_3_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_1_1x1_PURCHASE(2);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 40;
   }
}


//Direction_4
spritelayout spritelayout_urs_gslp_1_1x1_4 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_1_1x1(3);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_urs_gslp_1_1x1_SNOW(3);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_urs_gslp_1_1x1_4_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_1_1x1_PURCHASE(3);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}

//decide spritelayout for each of the 4 directions
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_1_1x1_view, view) {
    1:  spritelayout_urs_gslp_1_1x1_2;
    2:  spritelayout_urs_gslp_1_1x1_3;
    3:  spritelayout_urs_gslp_1_1x1_4;
    spritelayout_urs_gslp_1_1x1_1;
}

//calculate ground sprite for object
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_1_1x1_object, [
    STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
    STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
    STORE_TEMP(terrain_type == TILETYPE_DESERT ? GROUNDSPRITE_DESERT : LOAD_TEMP(1), 1),
    STORE_TEMP(terrain_type == TILETYPE_SNOW   ? GROUNDSPRITE_SNOW : LOAD_TEMP(1), 1),
    STORE_TEMP(snowline_height == 0xFF ? 0xFF : nearby_tile_height(0,0) - snowline_height, 127),
    STORE_TEMP((LOAD_TEMP(127) == -1) ? GROUNDSPRITE_SNOW_1_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  0) ? GROUNDSPRITE_SNOW_2_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  1) ? GROUNDSPRITE_SNOW_3_4 : LOAD_TEMP(1), 1)
        ]) {
    switch_urs_gslp_1_1x1_view;
}

//calculate ground sprite for purchase menu
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_1_1x1_purchase, view) {
    1:  spritelayout_urs_gslp_1_1x1_2_purchase;
    2:  spritelayout_urs_gslp_1_1x1_3_purchase;
    3:  spritelayout_urs_gslp_1_1x1_4_purchase;
    spritelayout_urs_gslp_1_1x1_1_purchase;
}

item (FEAT_OBJECTS, urs_gslp_1_1x1, 000) {
    property {
        class: "URSO";
        classname: string(STR_URSO);
        name: string(STR_urs_gslp_1_1x1);
        climates_available: ALL_CLIMATES;
        size: [1,1];
        build_cost_multiplier: 1;
        remove_cost_multiplier: 4;
        introduction_date: date(1700,1,1);
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_ANIMATED, OBJ_FLAG_REMOVE_IS_INCOME);
        height: 0;
        num_views: 4;
     }
    graphics {
        default: switch_urs_gslp_1_1x1_object;
        purchase: switch_urs_gslp_1_1x1_purchase;
        autoslope: return CB_RESULT_AUTOSLOPE;

      }
}


//spritesets with 4 directions, SNOW-version and the PURCHASE-menu
spriteset (spriteset_urs_gslp_2_1x1) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_2_1x1.png")
}

spriteset (spriteset_urs_gslp_2_1x1_SNOW) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_2_1x1_SNOW.png")
}

spriteset (spriteset_urs_gslp_2_1x1_PURCHASE) {
    template_1x1(0,0,"gfx/tramways/1817_GSLP/urs_gslp_2_1x1.png")
}

/* spritelayouts */

//Direction_1
spritelayout spritelayout_urs_gslp_2_1x1_1 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_2_1x1(0);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_urs_gslp_2_1x1_SNOW(0);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_urs_gslp_2_1x1_1_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_2_1x1_PURCHASE(0);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}



//Direction_2
spritelayout spritelayout_urs_gslp_2_1x1_2 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_2_1x1(1);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

building {
        sprite: spriteset_urs_gslp_2_1x1_SNOW(1);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

}

spritelayout spritelayout_urs_gslp_2_1x1_2_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_2_1x1_PURCHASE(1);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 40;
   }
}

//Direction_3
spritelayout spritelayout_urs_gslp_2_1x1_3 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_2_1x1(2);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

building {
        sprite: spriteset_urs_gslp_2_1x1_SNOW(2);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 40;
    }

}

spritelayout spritelayout_urs_gslp_2_1x1_3_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_2_1x1_PURCHASE(2);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 40;
   }
}


//Direction_4
spritelayout spritelayout_urs_gslp_2_1x1_4 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_urs_gslp_2_1x1(3);
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_urs_gslp_2_1x1_SNOW(3);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_urs_gslp_2_1x1_4_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_urs_gslp_2_1x1_PURCHASE(3);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}

//decide spritelayout for each of the 4 directions
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_2_1x1_view, view) {
    1:  spritelayout_urs_gslp_2_1x1_2;
    2:  spritelayout_urs_gslp_2_1x1_3;
    3:  spritelayout_urs_gslp_2_1x1_4;
    spritelayout_urs_gslp_2_1x1_1;
}

//calculate ground sprite for object
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_2_1x1_object, [
    STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
    STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
    STORE_TEMP(terrain_type == TILETYPE_DESERT ? GROUNDSPRITE_DESERT : LOAD_TEMP(1), 1),
    STORE_TEMP(terrain_type == TILETYPE_SNOW   ? GROUNDSPRITE_SNOW : LOAD_TEMP(1), 1),
    STORE_TEMP(snowline_height == 0xFF ? 0xFF : nearby_tile_height(0,0) - snowline_height, 127),
    STORE_TEMP((LOAD_TEMP(127) == -1) ? GROUNDSPRITE_SNOW_1_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  0) ? GROUNDSPRITE_SNOW_2_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  1) ? GROUNDSPRITE_SNOW_3_4 : LOAD_TEMP(1), 1)
        ]) {
    switch_urs_gslp_2_1x1_view;
}

//calculate ground sprite for purchase menu
switch (FEAT_OBJECTS, SELF, switch_urs_gslp_2_1x1_purchase, view) {
    1:  spritelayout_urs_gslp_2_1x1_2_purchase;
    2:  spritelayout_urs_gslp_2_1x1_3_purchase;
    3:  spritelayout_urs_gslp_2_1x1_4_purchase;
    spritelayout_urs_gslp_2_1x1_1_purchase;
}

item (FEAT_OBJECTS, urs_gslp_2_1x1, 001) {
    property {
        class: "URSO";
        classname: string(STR_URSO);
        name: string(STR_urs_gslp_2_1x1);
        climates_available: ALL_CLIMATES;
        size: [1,1];
        build_cost_multiplier: 1;
        remove_cost_multiplier: 4;
        introduction_date: date(1700,1,1);
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_ANIMATED, OBJ_FLAG_REMOVE_IS_INCOME);
        height: 0;
        num_views: 4;
     }
    graphics {
        default: switch_urs_gslp_2_1x1_object;
        purchase: switch_urs_gslp_2_1x1_purchase;
        autoslope: return CB_RESULT_AUTOSLOPE;

      }
}